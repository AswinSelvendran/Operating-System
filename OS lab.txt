Shell Programming:

read n;
fact=1;
for((i=1;i<=n;i++))
do
fact=$((fact*i))
done
echo The factorial is $fact;



read n;
fact=0;
for((i=1;i<=n;i++))
do
fact=$((fact+i))
done
echo The sum of $n is $fact;




read n
a=$((n%4))

if [ $a -eq 0 ]
then 
echo is leap year
else
echo is not a leap year;
fi;



read a b c;
if [ $a -gt $b -a $a -gt $c ]
then
echo "the $a is greatest"
elif [ $b -gt $c -a  $b -gt $a ]
then
echo "the $b is greatest";
else
echo "the $c is greatest";
fi;



read a ;
if [ $a -gt 0 ]
then 
echo is positive
else
echo is negative
fi



read n;
a=0
b=1
for((i=0;i<n;i++))
do
 echo $a
f=$((a+b))
a=$b
b=$f
done

read n;
if[ $n%2 -eq 0]
then
echo "It is even";
else
echo "It is odd";
fi;



Long program:

FCFS: 3)b

#include <iostream>
using namespace std;
int main()
{
   int n;
   cin>>n;
   int a[n];
   for(int i=0;i<n;i++){
       cin>>a[i];
   }
   int head;
   cin>>head;
   int ans=0;
   for(int i=0;i<n;i++){
       ans+=abs(head-a[i]);
       head=a[i];
   }
   cout<<ans;
}




FORC and exec system calls 7)a


#include<iostream>
#include<unistd.h>
#include<sys/wait.h>
using namespace std;

int main()
{
    int  pid;
    pid=fork();
    
    if(pid<0)
    {
        cout<<"fork is cancel";
        return 1;
    }
    
    else if(pid==0)
    {
        cout<<"parent process"<<getpid()<<endl;
        execl("bin/ls","ls","1",NULL);
        cout<<"fail";
        
        return 1;
    }
    
    else
    {
        cout<<"sucess";
        wait(NULL);
        cout<<"child sucess";
        return 1;
    }
    
}



CPU scheduling FCFS

#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    
    int wt[n];
    int bt[n];
    for(int i=0;i<n;i++)
    {
        cin>>bt[i];
    }
    int tat[n];
    
    for(int i=1;i<n;i++)
    {
       wt[0]=0;
        wt[i]=wt[i-1]+bt[i-1];
    }
    
    for(int i=1;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
    }
    
    int tat1=0;
    int tawt=0;
    
    for(int i=1;i<n;i++)
    {
        tawt+=wt[i];
        tat1+=tat[i];
    }
    
    cout<<tat1/n<<endl;
    cout<<tawt/n;
}



Bankers Algorithm

// You are using GCC
#include<iostream>
using namespace std;
bool check(int need[],int available[],int m) {
    for(int i=0;i<m;i++) {
        if(need[i] > available[i]) {
            return false;
        }
    }
    return true;
}
int main() {
    int n;
    cin>>n;
    string process[n];
    for(int i=0;i<n;i++) {
        cin>>process[i];
    }
    int m;
    cin>>m;
    int allocated[n][m];
    int max[n][m];
    int available[m];
    int need[n][m];
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            cin>>allocated[i][j];
        }
    }
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            cin>>max[i][j];
        }
    }
    for(int i=0;i<m;i++) {
        cin>>available[i];
    }
    // need matrix construction
    for(int i=0;i<n;i++) {
        for(int j=0;j<m;j++) {
            need[i][j] = max[i][j] - allocated[i][j];
        }
    }
    string safe[n];
    bool visited[n] = {false};
    int x = 0;
    while(true) {
        bool done = true;
        for(int i=0;i<n;i++) {
            if(!visited[i] && check(need[i],available,m)) {
                visited[i] = true;
                safe[x++] = process[i];
                for(int u=0;u<m;u++) {
                    available[u] += allocated[i][u];
                }
                done = false;
            }
            else {
                continue;
            }
        }
        if(done)break;
    }
    int t = 0;
    for(int i=0;i<n;i++) {
        cout<<safe[i]" ";
        if(visited[i]) {
            t++;
        }
    }
    cout<<endl;
    if(t == n) {
        cout<<"The System is in safe state";
    }
    else {
        cout<<"The System is not in safe state";
    }
}


5
p1 p2 p3 p4 p5
3
0 1 0
2 0 0
3 0 2
2 1 1
0 0 0

7 5 3
3 2 2
9 0 2
2 2 2
4 3 3

3 3 2


Producer Consumer:

#include<iostream>
#include<vector>
using namespace std;
bool ProducerCheck(vector<string>&buffer, string item, int n) {
    if(buffer.size() == n) {
        return false;
    }
    // buffer.push_front(item);
    buffer.insert(buffer.begin(),item);
    return true;
}
bool ConsumerCheck(vector<string>&buffer) {
    if(buffer.size() == 0) {
        return false;
    }
    buffer.pop_back();
    return true;
}
int main() {
    int n;
    cin>>n;
    vector<string> buffer;
    int options;
    while(1) {
        cin>>options;
        if(options == -1) {
            break;
        }
        if(options == 1) {
            string item;
            cin>>item;
            bool rel = ProducerCheck(buffer,item, n);
            if(rel) {
                cout<<"The item has been added to the buffer"<<endl;
            }
            else {
                cout<<"The buffer is full"<<endl;
            }
        }
        else {
            bool get = ConsumerCheck(buffer);
            if(get) {
                cout<<"The item has been consumed from the buffer"<<endl;
            }
            else {
                cout<<"There is no item in the buffer"<<endl;
            }
        }
    }
    
}




Page Replacement:    FIFO:

#include<iostream>
using namespace std;
bool check(int frame[],int capacity, int value) {
    for(int i=0;i<capacity;i++) {
        if(frame[i] == value){
            return true;
        }
    }
    return false;
}
void FindNoOfPageFaults(int arr[], int frame[], int n,int capacity) {
    int totalNumberOfPageFault = capacity;
    int x = 0;
    for(int i=capacity;i<n;i++) {
        if(check(frame,capacity,arr[i])) {
            continue;
        }
        else {
            totalNumberOfPageFault ++;
            x = x%capacity;
            frame[x] = arr[i];
            x++;
        }
    }
    cout<<totalNumberOfPageFault;
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++) {
        cin>>arr[i];
    }
    int capacity;
    cin>>capacity;
    int frame[capacity];
    for(int i=0;i<capacity;i++) {
        frame[i] = arr[i];
    }
    FindNoOfPageFaults(arr,frame,n,capacity);
}



SJF CPU Scheduling:

#include<iostream>
using namespace std;
void sort(string process[] , int burst[] , int n)
{
    for(int i=0 ; i<n ; i++)
    {
        int pos = i;
        int small = burst[i];
        for(int j=i+1 ; j<n ; j++)
        {
            if(burst[j] < small)
            {
                small = burst[j];
                pos = j;
            }
        }
        int temp = burst[i];
        burst[i] = burst[pos];
        burst[pos] = temp;
        string tempProcess = process[i];
        process[i] = process[pos];
        process[pos] = tempProcess;
    }
}
void getWaiting(int waiting[] , int burst[] , int n)
{
    waiting[0] = 0;
    for(int i=1 ; i<n ; i++)
    {
        waiting[i] = waiting[i-1] + burst[i-1];
    }
}
void getTurnaround(int turnaround[] , int waiting[] , int burst[] , int n)
{
    for(int i=0 ; i<n ; i++)
    {
        turnaround[i] = waiting[i] + burst[i];
    }
}
double getAvg(int arr[] , int n)
{
    double sum = 0;
    for(int i=0 ; i<n ; i++)
    {
        sum+=arr[i];
    }
    return sum/n;
}
int main()
{
    int n;
    cout<<"Enter the number of processes : ";
    cin>>n;
    string process[n];
    int burst[n];
    cout<<"Enter the process names : ";
    for(int i=0 ; i<n ; i++)
    {
        cin>>process[i];
    }
    cout<<"Enter burst time : ";
    for(int i=0 ; i<n ; i++)
    {
        cin>>burst[i];
    }
    int waiting[n];
    int turnaround[n];
    sort(process , burst , n);
    getWaiting(waiting , burst , n);
    getTurnaround(turnaround , waiting , burst , n);
    cout<<"Average waiting time : "<<getAvg(waiting , n)<<endl;
    cout<<"Average turnaround time : "<<getAvg(turnaround , n)<<endl;
}



Priority Scheduling:

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int main()
{
    int n;
    cin>>n;
  vector<pair<pair<int,int>,string>>arr;
  for(int i=0;i<n;i++)
  {
      int priority;
      cin>>priority;
      int bt;
      cin>>bt;
      string p;
      cin>>p;
      arr.push_back({{priority,bt},p});
  }
  sort(arr.begin(),arr.end());
  cout<<"Execution Order:";
  for(auto it:arr)
  {
      cout<<it.second<<" ";
  }
  cout<<endl;
  vector<int>waiting(n,0);
  for(int i=1;i<n;i++)
  {
      auto it=arr[i-1];
      waiting[i]=waiting[i-1]+it.first.second;
  }
  vector<int>tat(n,0);
  for(int i=0;i<n;i++)
  {
      tat[i]=waiting[i]+arr[i].first.second;
  }
  cout<<"Waiting time : ";
  int avg_wt=0,avg_tat=0;
  for(auto it:waiting)
  {
      cout<<it<<" ";
      avg_wt+=it;
  }
  cout<<(avg_wt/n)<<endl;
  cout<<"TurnAround time : ";
  for(auto it:tat)
  {
      cout<<it<<" ";
      avg_tat+=it;
  }
  cout<<(avg_tat/n)<<endl;
  
}




























